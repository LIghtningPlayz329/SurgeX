-- Create ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
screenGui.ResetOnSpawn = false

-- Create the Frame (Rectangle)
local rectangle = Instance.new("Frame")
rectangle.Size = UDim2.new(0.33, 0, 0.28, 0)  -- Adjusted rectangle size from both sides
rectangle.Position = UDim2.new(0.5, 0, 0.5, 0) -- Center the rectangle
rectangle.AnchorPoint = Vector2.new(0.5, 0.5)
rectangle.BackgroundTransparency = 0
rectangle.BorderSizePixel = 0  -- No outline
rectangle.Parent = screenGui

-- Add UICorner for rounded corners (reduced corner radius)
local uiCorner = Instance.new("UICorner")
uiCorner.CornerRadius = UDim.new(0.02, 0)  -- Reduced corner radius
uiCorner.Parent = rectangle

-- Create a UIGradient with adjusted reddish dark red, darker red, and red
local uiGradient = Instance.new("UIGradient")
uiGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(60, 0, 0)),    -- Dark dark reddish red
    ColorSequenceKeypoint.new(0.5, Color3.fromRGB(120, 0, 0)), -- Dark red
    ColorSequenceKeypoint.new(1, Color3.fromRGB(180, 0, 0))    -- Darker red
})
uiGradient.Parent = rectangle

-- Create 4 buttons, evenly sized and positioned inside the rectangle
local toggleNames = {
    "Killaura [Orbit Target]",
    "Attack Aura [Auto Reach Player]",
    "Titan Aura [Orbit Titan]",  -- Changed text for the third toggle
    "Attack Aura [Auto Reach Titan]"
}

for i = 1, 4 do
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0.92, 0, 0.2, 0)  -- Each button occupies 20% of the height and 92% width of the rectangle
    button.Position = UDim2.new(0.04, 0, (i - 1) * 0.24 + 0.05, 0)  -- Evenly position the buttons vertically
    button.Text = toggleNames[i]  -- Set text based on toggleNames array
    button.TextColor3 = Color3.fromRGB(255, 255, 255)  -- White text
    button.TextScaled = true  -- Scale the text
    button.Font = Enum.Font.GothamBold  -- Change to a cartoony font

    -- Decrease text size for specific toggles
    if i == 1 or i == 3 then
        button.TextSize = 12  -- Reduced text size for Killaura and Titan Aura
    end

    button.Parent = rectangle

    -- Add rounded corners to the buttons
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0.1, 0)  -- Adjust button corner radius if needed
    buttonCorner.Parent = button

    -- Add a darker gradient for each button (even more dark grey to dark grey)
    local buttonGradient = Instance.new("UIGradient")
    buttonGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(30, 30, 30)),   -- Even darker grey
        ColorSequenceKeypoint.new(1, Color3.fromRGB(70, 70, 70))    -- Dark grey
    })
    buttonGradient.Parent = button
end

-- Create the Square with Rounded Corners (changed to TextButton)
local square = Instance.new("TextButton")
square.Size = UDim2.new(0.07, 0, 0.07, 0)  -- Slightly decreased size for the button
square.Position = UDim2.new(0, 0, 1, -90)  -- Position it at the bottom left corner
square.BackgroundTransparency = 0
square.Parent = screenGui

-- Add UICorner for the square
local squareCorner = Instance.new("UICorner")
squareCorner.CornerRadius = UDim.new(0.1, 0)  -- Rounded corners for the square
squareCorner.Parent = square

-- Add a UIGradient for the square (red gradient)
local squareGradient = Instance.new("UIGradient")
squareGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(60, 0, 0)),    -- Dark red
    ColorSequenceKeypoint.new(1, Color3.fromRGB(180, 0, 0))     -- Red
})
squareGradient.Parent = square

-- Add a label to the square
local label = Instance.new("TextLabel")
label.Size = UDim2.new(1, 0, 1, 0)  -- Cover the whole square
label.BackgroundTransparency = 1  -- Make background transparent
label.Text = "Hide UI"  -- Updated text
label.TextColor3 = Color3.fromRGB(255, 255, 255)  -- White text
label.TextScaled = true  -- Scale the text
label.Font = Enum.Font.GothamBold  -- Change to a cartoony font
label.TextSize = 14  -- Keep text size as is
label.Parent = square

-- Hide the entire UI when the square is clicked
square.MouseButton1Click:Connect(function()
    if rectangle.Visible then
        rectangle.Visible = false  -- Hide the main UI
        label.Text = "Show UI"  -- Change text to "Show UI"
    else
        rectangle.Visible = true  -- Show the main UI
        label.Text = "Hide UI"  -- Change text back to "Hide UI"
    end
end)

-- Make the toggle square movable on PC and mobile
local dragging
local dragInput
local startPos

local function startDrag(input)
    dragging = true
    startPos = input.Position

    -- Disable other UI interactions while dragging
    dragInput = game:GetService("UserInputService").InputChanged:Connect(function()
        if dragging then
            local delta = input.Position - startPos
            local newPos = UDim2.new(
                square.Position.X.Scale,
                square.Position.X.Offset + delta.X,
                square.Position.Y.Scale,
                square.Position.Y.Offset + delta.Y
            )
            square.Position = newPos
            startPos = input.Position -- Update start position to allow for smoother dragging
        end
    end)

    square.InputEnded:Connect(function()
        dragging = false
        if dragInput then
            dragInput:Disconnect()
            dragInput = nil
        end
    end)
end

-- Input handling for dragging
square.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or 
       input.UserInputType == Enum.UserInputType.Touch then  -- Support for mobile
        startDrag(input)
    end
end)

-- Cleanup when dragging ends
square.InputEnded:Connect(function()
    dragging = false
    if dragInput then
        dragInput:Disconnect()
        dragInput = nil
    end
end)
